import type { ConfiguredSchemas } from '../schema/types.js';
import type { RequestInterceptor } from '../requestInterceptor/types.js';
import type { ResponseBodyInterceptor } from '../responseBodyInterceptor/types.js';
import type { Implementations } from '../implementations.js';
type ResourcePath = string;
type ExtendedResource = {
    resourcePath: ResourcePath;
    singularName: string;
    pluralName: string;
};
type Resources = (ResourcePath | ExtendedResource)[];
type OpenApiConfig = boolean | Record<string, unknown>;
export type Config = {
    validateResources: boolean;
    resources: Resources;
    apiPrefix: string | null;
    requestInterceptor: RequestInterceptor | null;
    responseBodyInterceptor: ResponseBodyInterceptor | null;
    staticFolder: string | null;
    connectionString: string | null;
    delay: number;
    returnNullFields: boolean;
    port: number;
    schemas: ConfiguredSchemas | null;
    allowDeleteCollection: boolean;
    etagsEnabled: boolean;
    openapi: OpenApiConfig;
    isTesting: boolean;
    implementations: Implementations | null;
};
export type ConfigKey = keyof Config;
export type RouterConfig = Pick<Config, 'validateResources' | 'resources' | 'apiPrefix' | 'requestInterceptor' | 'responseBodyInterceptor' | 'returnNullFields' | 'allowDeleteCollection' | 'etagsEnabled'>;
export type UserConfig = {
    resources?: Resources;
    staticFolder?: string;
    apiPrefix?: string;
    connectionString?: string;
    delay?: number;
    requestInterceptor?: RequestInterceptor;
    responseBodyInterceptor?: ResponseBodyInterceptor;
    returnNullFields?: boolean;
    port?: number;
    schemas?: ConfiguredSchemas;
    allowDeleteCollection?: boolean;
    etags?: boolean;
    openapi?: OpenApiConfig;
    isTesting?: boolean;
    implementations?: Implementations;
};
export declare const initConfig: (userConfig?: UserConfig) => Config;
export declare const isUndefined: (value: unknown) => value is undefined;
export {};
//# sourceMappingURL=index.d.ts.map