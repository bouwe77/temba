import { connect } from '@rakered/mongo';
let uri;
let db;
const removeUnderscoreFromId = ({ _id: id, ...updatedItem }) => ({
    id,
    ...updatedItem,
});
export const createMongoQueries = (connectionString, log) => {
    uri = connectionString;
    const connectToDatabase = async () => {
        if (!db) {
            log.debug('Connecting to MongoDB...');
            try {
                db = await connect(uri);
                log.debug('Connected to MongoDB!');
            }
            catch (error) {
                log.debug('Error connecting to MongoDB');
                log.error(error);
            }
        }
    };
    const getAll = async (resource) => {
        await connectToDatabase();
        const items = (await db[resource].find({}));
        if (!items)
            return [];
        return items.map((item) => removeUnderscoreFromId(item));
    };
    const getById = async (resource, id) => {
        await connectToDatabase();
        const item = await db[resource].findOne({ _id: id });
        if (!item)
            return null;
        return removeUnderscoreFromId(item);
    };
    const create = async (resource, id, item) => {
        await connectToDatabase();
        const createdItem = await db[resource].insertOne(id ? { ...item, _id: id } : item);
        return removeUnderscoreFromId(createdItem.ops[0]);
    };
    const update = async (resource, item) => {
        await connectToDatabase();
        const { id, ...itemWithoutId } = item;
        const updatedItem = await db[resource].findOneAndUpdate({ _id: id }, { $set: itemWithoutId }, { returnOriginal: false });
        return removeUnderscoreFromId(updatedItem.value);
    };
    const replace = async (resource, item) => {
        await connectToDatabase();
        const { id, ...itemWithoutId } = item;
        const replacedItem = await db[resource].findOneAndReplace({ _id: id }, itemWithoutId, {
            returnOriginal: false,
        });
        return removeUnderscoreFromId(replacedItem.value);
    };
    const deleteById = async (resource, id) => {
        await connectToDatabase();
        await db[resource].deleteOne({ _id: id });
    };
    const deleteAll = async (resource) => {
        await connectToDatabase();
        await db[resource].deleteMany({});
    };
    const mongoQueries = {
        getAll,
        getById,
        create,
        update,
        replace,
        deleteById,
        deleteAll,
    };
    return mongoQueries;
};
//# sourceMappingURL=index.js.map