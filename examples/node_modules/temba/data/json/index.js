import { Low, Memory } from 'lowdb';
import { JSONFile } from 'lowdb/node';
const getInMemoryDb = (defaultData) => {
    return getJsonDb(new Memory(), defaultData);
};
const getFileDb = async (filename, defaultData) => {
    return await getJsonDb(new JSONFile(filename), defaultData);
};
const getJsonDb = async (adapter, defaultData) => {
    const db = new Low(adapter, defaultData);
    await db.read();
    return db;
};
export default function createJsonQueries({ filename }) {
    const defaultData = {};
    async function getDb() {
        const db = filename ? await getFileDb(filename, defaultData) : await getInMemoryDb(defaultData);
        return db;
    }
    async function getAll(resource) {
        const db = await getDb();
        const data = db.data[resource] || [];
        return data;
    }
    async function getById(resource, id) {
        const db = await getDb();
        const data = db.data[resource] || [];
        return (data || []).find((x) => x.id === id) || null;
    }
    async function create(resource, id, item) {
        const db = await getDb();
        const itemWithId = {
            ...item,
            id: id || String(new Date().getTime()),
        };
        await db.update((data) => {
            data[resource] = [...(data[resource] || []), itemWithId];
        });
        return itemWithId;
    }
    async function update(resource, item) {
        const updatedItem = { ...item };
        const db = await getDb();
        await db.update((data) => {
            data[resource] = [...(data[resource] || []).filter((r) => r.id !== item.id), updatedItem];
        });
        return updatedItem;
    }
    async function replace(resource, item) {
        return update(resource, item);
    }
    async function deleteById(resource, id) {
        const db = await getDb();
        await db.update((data) => {
            data[resource] = [...(data[resource] || []).filter((r) => r.id !== id)];
        });
    }
    async function deleteAll(resource) {
        const db = await getDb();
        await db.update((data) => {
            data[resource] = [];
        });
    }
    const fileQueries = {
        getAll,
        getById,
        create,
        update,
        replace,
        deleteById,
        deleteAll,
    };
    return fileQueries;
}
//# sourceMappingURL=index.js.map