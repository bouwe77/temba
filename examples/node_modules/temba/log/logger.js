import morgan from 'morgan';
const logLevels = {
    debug: 0,
    info: 1,
    error: 2,
};
const createLogger = (logLevel) => {
    const log = (level, ...data) => {
        // Only log when the level is at least as high as the configured log level
        if (logLevels[level] >= logLevels[logLevel]) {
            try {
                console[level](`${new Date().toISOString()} ${level.toUpperCase().padEnd(6, ' ')}- ${data.join(' ')}`);
            }
            catch {
                // swallow exceptions during logging
            }
        }
    };
    return {
        debug: (...data) => log('debug', ...data),
        info: (...data) => log('info', ...data),
        error: (...data) => log('error', ...data),
    };
};
const isInvalid = (value) => {
    return !value || !Object.keys(logLevels).includes(value);
};
export const initLogger = (configuredLogLevel) => {
    const logLevel = isInvalid(configuredLogLevel) ? 'debug' : configuredLogLevel;
    const log = createLogger(logLevel);
    log.debug('Logger initialized');
    return {
        logLevel,
        log,
    };
};
const noopHandler = (_, __, next) => next();
export const getHttpLogger = (logLevel) => {
    return logLevel === 'debug'
        ? morgan(':date[iso] DEBUG - :method :url :status :res[content-length] - :response-time ms')
        : noopHandler;
};
//# sourceMappingURL=logger.js.map