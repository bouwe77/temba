import { handleMethodNotAllowed, handleNotFound, sendErrorResponse } from '../resourceHandler.js';
import path from 'node:path';
import fs from 'node:fs';
import mime from 'mime/lite';
import { setCorsHeaders } from '../cors/cors.js';
const parseError = (e) => {
    if (e.code === 'ENOENT')
        return 'NotFound';
    return 'UnknownError';
};
const allowedMethods = ['GET', 'HEAD'];
export const handleStaticFolder = (req, res, getStaticFileFromDisk) => {
    if (!req.method || !allowedMethods.includes(req.method))
        return handleMethodNotAllowed(req, res);
    try {
        const staticContent = getStaticFileFromDisk();
        res.statusCode = 200;
        res.setHeader('Content-Type', staticContent.mimeType);
        setCorsHeaders(res);
        if (typeof staticContent.content === 'string') {
            res.end(staticContent.content);
        }
        else {
            res.end(staticContent.content);
        }
    }
    catch (e) {
        return parseError(e) === 'NotFound' ? handleNotFound(req, res) : sendErrorResponse(res);
    }
};
export const createGetStaticFileFromDisk = (config) => {
    return (filename) => {
        const filePath = path.join(config.staticFolder || '', filename);
        const mimeType = mime.getType(filePath) || 'application/octet-stream';
        const isText = mimeType.startsWith('text/') || mimeType === 'application/json';
        return {
            content: fs.readFileSync(filePath, isText ? 'utf8' : undefined),
            mimeType,
        };
    };
};
//# sourceMappingURL=staticFolder.js.map