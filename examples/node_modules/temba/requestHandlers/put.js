import { interceptPutRequest } from '../requestInterceptor/interceptRequest.js';
import { validate } from '../schema/validate.js';
import { removeNullFields } from './utils.js';
import { TembaError } from '../requestInterceptor/TembaError.js';
import { etag } from '../etags/etags.js';
export const createPutRoutes = (queries, requestInterceptor, returnNullFields, schemas, etagsEnabled) => {
    const handlePut = async (req) => {
        try {
            const { headers, body, resource, id } = req;
            const validationResult = validate(body, schemas?.[resource]);
            if (validationResult.isValid === false) {
                return { status: 400, body: { message: validationResult.errorMessage } };
            }
            let body2 = body;
            if (requestInterceptor?.put) {
                try {
                    body2 = interceptPutRequest(requestInterceptor.put, headers, resource, id, body);
                }
                catch (error) {
                    return {
                        status: error instanceof TembaError ? error.statusCode : 500,
                        body: { message: error.message },
                    };
                }
            }
            let item = await queries.getById(resource, id);
            if (!item)
                return {
                    status: 404,
                    body: {
                        message: `ID '${id}' not found`,
                    },
                };
            if (etagsEnabled) {
                const itemEtag = etag(JSON.stringify(item));
                if (req.etag !== itemEtag) {
                    return {
                        status: 412,
                        body: {
                            message: 'Precondition failed',
                        },
                    };
                }
            }
            item = { ...body2, id };
            const replacedItem = await queries.replace(resource, item);
            return { status: 200, body: returnNullFields ? replacedItem : removeNullFields(replacedItem) };
        }
        catch (error) {
            return { status: 500, body: { message: error.message } };
        }
    };
    return handlePut;
};
//# sourceMappingURL=put.js.map