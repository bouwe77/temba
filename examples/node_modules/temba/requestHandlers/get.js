import { generateEtag } from '../etags/etags.js';
import { TembaError } from '../requestInterceptor/TembaError.js';
import { interceptGetRequest } from '../requestInterceptor/interceptRequest.js';
import { interceptResponseBody } from '../responseBodyInterceptor/interceptResponseBody.js';
import { removeNullFields } from './utils.js';
export const createGetRoutes = (queries, requestInterceptor, responseBodyInterceptor, returnNullFields, etagsEnabled) => {
    const handleGet = async (req) => {
        const { headers, resource, id, ifNoneMatchEtag } = req;
        const responseOk = (body) => {
            if (!etagsEnabled)
                return { status: 200, body };
            const etag = generateEtag(body);
            return ifNoneMatchEtag === etag
                ? { status: 304, headers: { etag } }
                : { status: 200, body, headers: { etag } };
        };
        try {
            if (req.method === 'get' && requestInterceptor?.get) {
                try {
                    interceptGetRequest(requestInterceptor.get, headers, resource, id);
                }
                catch (error) {
                    return {
                        status: error instanceof TembaError ? error.statusCode : 500,
                        body: { message: error.message },
                    };
                }
            }
            if (id) {
                const item = await queries.getById(resource, id);
                if (!item) {
                    return { status: 404 };
                }
                const theItem = responseBodyInterceptor
                    ? interceptResponseBody(responseBodyInterceptor, { resource, body: item, id })
                    : item;
                if (!returnNullFields) {
                    if (Array.isArray(theItem)) {
                        return responseOk(theItem.map((item) => removeNullFields(item)));
                    }
                    if (typeof theItem === 'object') {
                        return responseOk(removeNullFields(theItem));
                    }
                }
                return responseOk(theItem);
            }
            const items = await queries.getAll(resource);
            const theItems = responseBodyInterceptor
                ? interceptResponseBody(responseBodyInterceptor, { resource, body: items })
                : items;
            if (!returnNullFields) {
                if (Array.isArray(theItems)) {
                    return responseOk(theItems.map((item) => removeNullFields(item)));
                }
                if (typeof theItems === 'object') {
                    return responseOk(removeNullFields(theItems));
                }
            }
            return responseOk(theItems);
        }
        catch (error) {
            return { status: 500, body: { message: error.message } };
        }
    };
    return handleGet;
};
//# sourceMappingURL=get.js.map