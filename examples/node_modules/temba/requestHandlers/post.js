import { format } from 'url';
import { interceptPostRequest } from '../requestInterceptor/interceptRequest.js';
import { removeNullFields } from './utils.js';
import { validate } from '../schema/validate.js';
import { TembaError } from '../requestInterceptor/TembaError.js';
export const createPostRoutes = (queries, requestInterceptor, returnNullFields, schemas) => {
    const handlePost = async (req) => {
        try {
            const { headers, body, protocol, host, resource, id } = req;
            const validationResult = validate(body, schemas[resource]);
            if (validationResult.isValid === false) {
                return { status: 400, body: { message: validationResult.errorMessage } };
            }
            let body2 = body;
            if (requestInterceptor?.post) {
                try {
                    body2 = interceptPostRequest(requestInterceptor.post, headers, resource, id, body);
                }
                catch (error) {
                    return {
                        status: error instanceof TembaError ? error.statusCode : 500,
                        body: { message: error.message },
                    };
                }
            }
            if (id) {
                const item = await queries.getById(resource, id);
                if (item)
                    return {
                        status: 409,
                        body: {
                            message: `ID '${id}' already exists`,
                        },
                    };
            }
            const newItem = await queries.create(resource, id, body2);
            return {
                headers: {
                    Location: format({
                        protocol: protocol,
                        host: host,
                        pathname: `${resource}/${newItem.id}`,
                    }),
                },
                status: 201,
                body: returnNullFields ? newItem : removeNullFields(newItem),
            };
        }
        catch (error) {
            return { status: 500, body: { message: error.message } };
        }
    };
    return handlePost;
};
//# sourceMappingURL=post.js.map