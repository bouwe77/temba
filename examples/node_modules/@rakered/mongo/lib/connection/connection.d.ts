import { FilterQuery, FindOneOptions, Collection } from 'mongodb';
export interface Connection<T> {
    totalCount: number;
    pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        endCursor: string | undefined;
        startCursor: string | undefined;
    };
    nodes: T[];
    edges: {
        cursor: string;
        node: T;
    }[];
}
export declare type PaginationArgs<T extends Record<string, any>> = {
    sort?: [Extract<keyof T, string>, 'asc' | 'desc'];
    after?: string;
    before?: string;
    first?: number;
    last?: number;
};
export declare type ConnectionOptions<T> = Pick<FindOneOptions<T>, 'projection'> & PaginationArgs<T>;
export declare function getConnection<T>(collection: Collection<T>, query: FilterQuery<T>, options: ConnectionOptions<T>): Promise<Connection<T>>;
export declare function getConnection<T>(collection: Collection<T>, query: FilterQuery<T>, options: ConnectionOptions<T> & {
    type: 'nodes';
}): Promise<Omit<Connection<T>, 'edges'>>;
export declare function getConnection<T>(collection: Collection<T>, query: FilterQuery<T>, options: ConnectionOptions<T> & {
    type: 'edges';
}): Promise<Omit<Connection<T>, 'nodes'>>;
