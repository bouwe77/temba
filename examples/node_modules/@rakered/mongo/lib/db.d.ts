import './collection';
import type { Db as MongoDb, MongoClientOptions, WithTransactionCallback } from 'mongodb';
import { MongoClient, TransactionOptions } from 'mongodb';
import { Collection } from './collection';
export declare type Db = MongoDb & {
    connect: () => Promise<void>;
    disconnect: (force?: boolean) => Promise<void>;
    transaction: (fn: WithTransactionCallback, options?: TransactionOptions) => Promise<void>;
    client: MongoClient;
} & Record<string, Collection<any>>;
export declare type Options = MongoClientOptions & {
    autoDisconnect?: boolean;
};
export declare function create<TDb extends Db = Db>(uri?: string, options?: Options): TDb;
export declare function connect(uri?: string, options?: Options): Promise<Db>;
